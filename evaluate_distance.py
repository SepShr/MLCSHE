'''
This code contains the class PairwiseDistance to calculate the
distance matrix for a list of vectors. It also contains the functions
that are used by ICCEA to calculate the distance for reference. At
the later section of the code, various examples of using pdist and
the implemented class is available.

## Encodings
mlco = [
        [
            label: 0 -> vehicle, 1 -> person,
            t0: [0, ??],
            t1: [0, ??],
            bbox_t0_x_min: [0, 750], # Assuming a minimum of 50 px for bbox size.
            bbox_t0_y_min: [0, 550],
            bbox_t0_x_max: [50, 800],
            bbox_t0_y_max: [50, 600],
            bbox_t1_x_min: [0, 750],
            bbox_t1_y_min: [0, 550],
            bbox_t1_x_max: [50, 800],
            bbox_t1_y_max: [50, 600],
        ], 
    ...]

- Example:
mlco_1 = [0, 5., 352.5, 102., 176.6, 253.9, 396.3, 3.7, 57.1, 509.2, 590.]
mlco_2 = [1, 253.2, 466., 638.3, 478.1, 800., 599.5, 747.6, 800., 166.4, 301.3]

scen = [
    time_of_day: 0 -> noon, 1 -> sunset, 2 -> night,
    weather: 0-> clear, 1 -> cloudy, 2 -> wet, 3 -> wet cloudy, 4 -> medium rain, 5 -> hard rain, 6 -> soft rain,
    pedestrian: 0 -> 0, 1 -> 18,
    road curve: 0 -> straight, 1 -> right, 2 -> left, 3 -> not clear!,
    road ID: 0, 1, 2,
    road length: 0, 1, 2 (from shortest to longest),
    path: 0 -> follow road, 1 -> 1st exit, 2 -> 2nd exit
    ]

- Example:
scen_1 = [0, 2, 1, 2, 0, 1, 1]
scen_2 = [2, 6, 0, 3, 2, 0, 0]

cs = [scen, mlco]
- A CS is a triple-nested heterogeneous list. --> flatten 3 times.

## Flattening
- Currently, the flatten funciton is recursive. A potentially better alternative is provided below:
flattened_list = lambda my_list: sum(map(flattened_list,my_list),[]) if isinstance(my_list,list) else [my_list]
'''

from timeit import Timer
from scipy import spatial
import numpy as np


class PairwiseDistance:
    """Calculates and updates a pairwise distance matrix for a set of complete solutions.
    """

    def __init__(self, vectors, numeric_ranges, categorical_indices) -> None:
        """X is the 2D list of vectors of the same size.
        """
        self.vectors = vectors
        self.squareform_distance_matrix = np.zeros(len(vectors))
        self.numeric_ranges = numeric_ranges
        self.categorical_indices = categorical_indices
        # FIXME: self.compact_distance_matrix = ??

    def compute_distance_matrix(self, vectors, cat_ix, num_ranges):
        """Computes the pairwise distance between all vectors.
        """
        squareform_distance_matrix = []
        for vec_index in range(len(vectors)):
            squareform_distance_matrix += [measure_heom_distance([vectors[vec_index]] + vectors,
                                                                 cat_ix,
                                                                 num_ranges)[1:]]
        self.squareform_distance_matrix = squareform_distance_matrix
        print('sqf_distance_matrix is: ' + str(squareform_distance_matrix))

    def measure_heom_distance(
        self,
        X: list,
        cat_ix: list,
        num_range: list,
        normalised: str = "abs"
    ) -> list:
        """Calculate the Heterogeneous Euclidean-Overlap Metric (HEOM)- difference
        between a list located at X[0] and the rest of the lists of similar size.
        (TODO: what do you mean by the lists of 'similar' size?)

        :param X: X is a 2D list of flattened heterogeneuous lists.
        :param cat_ix: is a list of indices of the categorical values.
        :param nan_equivalents: list of values that are considered as
                                missing values.
        :param normalised: normalization method, can be "normal"
                           (uses the data range within X), "std" (uses
                           standard deviation) or "abs" (uses absolute
                           range of the data).
        :return: a list of normalized distance (TODO: is this correct?)

        Assumptions:
        1. There is no missing data.
        """

        assert len(X) > 1  # measure distance between at least two lists
        for col in range(1, len(X)):
            # the length of each list must be the same
            assert len(X[col-1]) == len(X[col])

        if normalised == "abs":
            assert num_range is not None

        cat_ix = cat_ix
        row_x = len(X)
        col_x = len(X[0])

        # Initialize numeric_range list.
        numeric_range = []
        for i in range(len(X[0])):
            numeric_range.append(1)

        # Initialize the results array
        results_array = np.zeros((row_x, col_x))

        # Calculate the distance for categorical elements
        for index in cat_ix:
            for row in range(1, row_x):
                if X[0][index] != X[row][index]:
                    results_array[row][index] = 1

        # Get numerical indices without missing values elements
        num_ix = [i for i in range(col_x) if i not in cat_ix]

        # Calculate range for numeric values.
        # TODO: check issue #8
        for i in range(len(X[0])):
            if i in num_ix:
                if normalised == "abs":
                    numeric_range = num_range
                elif normalised == "std":
                    # ???: why multiply by 4?
                    numeric_range[i] = 4 * calculate_std(X, i)
                elif normalised == "normal":
                    numeric_range[i] = calculate_max(
                        X, i) - calculate_min(X, i)
                    if numeric_range[i] == 0.0:
                        numeric_range[i] = 0.0001
                        # To avoid division by zero in case of similar values.
                else:
                    raise ValueError(
                        "normalized can only be abs, std, or normal.")

        # Calculate the distance for numerical elements
        for index in num_ix:
            for row in range(1, row_x):
                column_difference = X[0][index] - X[row][index]
                results_array[row, index] = \
                    np.abs(column_difference) / \
                    numeric_range[index]

        heom_distance_values = \
            list(np.sqrt(np.sum(np.square(results_array)/col_x, axis=1)))
        return heom_distance_values

# Functions used in the previous version of distance evaluation.
# Will be removed after the class PairwiseDistance is finalized.


def gather_values_in_np_array(two_d_list, numeric_value_index):
    """Gathers all numeric values from a 2D list, located at a specific column.

    :param two_d_list: a 2D list.
    :param numeric_value_index: the index of a numeric value, i.e.,
                                a coloumn in the 2D array.

    :returns: a numpy array.
    """
    # DOES NOT HANDLE NOMINAL VALUE INPUTS.
    # DOES NOT HANDLE CASES WERE THE NUMERIC VALUE INDEX IS OUT OF RANGE.
    numeric_values_array = np.zeros(len(two_d_list))

    for i in range(len(two_d_list)):
        numeric_values_array[i] = two_d_list[i][numeric_value_index]

    return numeric_values_array


def gather_values_in_list(two_d_list, numeric_value_index):
    """Gathers all the numeric values from a 2D list, located at a specific
    column.

    :param two_d_list: a 2D list.
    :param numeric_value_index: the index of a numeric value, i.e.,
                                a coloumn in the 2D array.

    :returns: a list.
    """
    # DOES NOT HANDLE NOMINAL VALUE INPUTS.
    # DOES NOT HANDLE CASES WERE THE NUMERIC VALUE INDEX IS OUT OF RANGE.
    numeric_values_list = []

    for i in range(len(two_d_list)):
        numeric_values_list.append(two_d_list[i][numeric_value_index])

    return numeric_values_list


def calculate_std(two_d_list, numeric_value_index):
    """Calculates the standard deviation for the numeric values whose index is
    provided.

    The values are in a 2D list.
    """
    X = gather_values_in_np_array(two_d_list, numeric_value_index)

    return np.std(X)


def calculate_max(two_d_list, numeric_value_index):
    """Calculates the maximum value along a column of a 2D list."""
    X = gather_values_in_list(two_d_list, numeric_value_index)

    return max(X)


def calculate_min(two_d_list, numeric_value_index):
    """Calculates the minimum value along a column of a 2D list."""
    X = gather_values_in_list(two_d_list, numeric_value_index)

    return min(X)


def measure_heom_distance(
        X: list,
        cat_ix: list,
        nan_equivalents: list = [np.nan, 0],
        normalised: str = "normal"
) -> list:
    """Calculate the Heterogeneous Euclidean-Overlap Metric (HEOM)- difference
    between a list located at X[0] and the rest of the lists of similar size.
    (TODO: what do you mean by the lists of 'similar' size?)

    :param X: X is a 2D list of flattened heterogeneuous lists.
    :param cat_ix: is a list of indices of the categorical values.
    :param nan_equivalents: list of values that are considered as
                            missing values.
    :param normalised: normalization method, can be "normal" or "std".
    :return: a list of normalized distance (TODO: is this correct?)
    """

    assert len(X) > 1  # measure distance between at least two lists
    for col in range(1, len(X)):
        # the length of each list must be the same
        assert len(X[col-1]) == len(X[col])

    nan_eqvs = nan_equivalents  # FIXME: `nan_eqvs` is never used later
    cat_ix = cat_ix
    row_x = len(X)
    col_x = len(X[0])

    # Initialize numeric_range list.
    numeric_range = []
    for i in range(len(X[0])):
        numeric_range.append(1)

    # Initialize the results array
    results_array = np.zeros((row_x, col_x))

    # Get indices for missing values, if any

    # Calculate the distance for missing values elements
    # Hint: the distance for missing values is equal to one!

    # Get categorical indices without missing values elements

    # Calculate the distance for categorical elements
    for index in cat_ix:
        for row in range(1, row_x):
            if X[0][index] != X[row][index]:
                results_array[row][index] = 1

    # Get numerical indices without missing values elements
    num_ix = [i for i in range(col_x) if i not in cat_ix]

    # Calculate range for numeric values.
    # TODO: check issue #8
    for i in range(len(X[0])):
        if i in num_ix:
            if normalised == "std":
                # ???: why multiply by 4?
                numeric_range[i] = 4 * calculate_std(X, i)
            else:
                numeric_range[i] = calculate_max(X, i) - calculate_min(X, i)
                if numeric_range[i] == 0.0:
                    numeric_range[i] = 0.0001
                    # To avoid division by zero in case of similar values.

    # Calculate the distance for numerical elements
    for index in num_ix:
        for row in range(1, row_x):
            column_difference = X[0][index] - X[row][index]
            results_array[row, index] = \
                np.abs(column_difference) / \
                numeric_range[index]

            # USE THE ABSOLUTE VALUE FOR DIFFERENCE

    heom_distance_values = \
        list(np.sqrt(np.sum(np.square(results_array)/col_x, axis=1)))
    return heom_distance_values


# Test data.
test_data_1 = [
    [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
     1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
    [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
     8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
    [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
     10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91]
]
test_data_2 = [
    [1, 0, 5.0, 1, 1, 21, 4],
    [4, 1, -7.8, 8, 1, 2, 2],
    [2, -1, -9.8, 10, 3, 2, 91]
]
category_indices = [0, 3, 6]
# To be used with test_data_2 for pdist.
weights = [1/5, 1/4, 1/20, 1/10, 1/4, 1/20, 1/100]
# To be used with test_data_2 for HEOM distance.
numeric_ranges = [1, 4, 20, 1, 3, 25, 1]

# Timeit the pdist function for larger test_data.
dist_timer = Timer("""spatial.distance.pdist(test_data, metric='euclidean')""",
                   setup="""from scipy import spatial; test_data = [
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91],
            [1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1,
                1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4, 1, 0, 5.0, 1, 1, 21, 4],
            [4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8,
                8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2, 4, 1, -7.8, 8, 1, 2, 2],
            [2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8,
                10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91, 2, -1, -9.8, 10, 3, 2, 91]
]""")
print(dist_timer.timeit(100))

# Various distance evaluations.
dist = spatial.distance.pdist(test_data_1, metric='euclidean')
print('dist is: ' + str(dist))

dist_sqf = spatial.distance.squareform(dist)
print('dist_sqf is: ' + str(dist_sqf))

dist_hamming = spatial.distance.pdist(test_data_1, metric='hamming')
print('dist_hamming is: ' + str(dist_hamming))

normalized_dist = spatial.distance.pdist(
    test_data_1, metric='seuclidean')
print('normalized_dist is: ' + str(normalized_dist))

final_dist = normalized_dist + dist_hamming
print('final pdist is: ' + str(final_dist))

final_dist = final_dist**[0.5]
print('final pdist is: ' + str(final_dist))

final_dist_sqf = spatial.distance.squareform(final_dist)
print('final pdist sqf is: ' + str(final_dist_sqf))

dist_2_unweighted = spatial.distance.pdist(test_data_2, 'euclidean')
print('dist_2_unweighted is: ' + str(dist_2_unweighted))

test_distance = PairwiseDistance(
    vectors=test_data_2, numeric_ranges=numeric_ranges, categorical_indices=category_indices)
test_distance.compute_distance_matrix(vectors=test_distance.vectors,
                                      cat_ix=test_distance.categorical_indices,
                                      num_ranges=test_distance.numeric_ranges)
